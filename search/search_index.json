{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Drain-It is an Inlet + Culvert Peak-Flow and Capacity Calculator that uses a TR-55 Model and parameters derived from geospatial data. This software encompasses work originally developed by the Cornell Soil & Water Lab (on GitHub @ github.com/SoilWaterLab ) Credits/Contributors This repository represents an evolution of a previous effort, the Peak-Flow Calculator , which was a hard fork of the Water Lab's CulvertEvalution repository. Made in collaboration with the Cornell S&W lab, this repository includes additional updates to the science of the from CulvertModel_2.1 . Original peak flow analytics are based on the culvert evaluation model developed by Rebecca Marjerison at the Cornell Soil and Water Lab in 2013, as CulvertEvalution David Gold, python script development, August 4, 2015 Object-oriented structure and resiliency updates built by Noah Warnke, August 31 2016 (no formulas changed). Updated by Zoya Kaufmann June 2016 - August 2017 Merged with older versions by Tanvi Naidu June 19 2017 Fork, refactor, and creation of CLI and ArcMap interfaces by Christian Gass @ CivicMapper, Fall 2017, as peak-flow-calculator Updates for use within ArcGIS Pro by Christian Gass @ CivicMapper, Spring/Summer 2019, in peak-flow-calculator CulvertModel_2.1 by Jo Archibald in 2019 Drain-It repository by CivicMapper, 2021-2022","title":"About"},{"location":"#about","text":"Drain-It is an Inlet + Culvert Peak-Flow and Capacity Calculator that uses a TR-55 Model and parameters derived from geospatial data. This software encompasses work originally developed by the Cornell Soil & Water Lab (on GitHub @ github.com/SoilWaterLab )","title":"About"},{"location":"#creditscontributors","text":"This repository represents an evolution of a previous effort, the Peak-Flow Calculator , which was a hard fork of the Water Lab's CulvertEvalution repository. Made in collaboration with the Cornell S&W lab, this repository includes additional updates to the science of the from CulvertModel_2.1 . Original peak flow analytics are based on the culvert evaluation model developed by Rebecca Marjerison at the Cornell Soil and Water Lab in 2013, as CulvertEvalution David Gold, python script development, August 4, 2015 Object-oriented structure and resiliency updates built by Noah Warnke, August 31 2016 (no formulas changed). Updated by Zoya Kaufmann June 2016 - August 2017 Merged with older versions by Tanvi Naidu June 19 2017 Fork, refactor, and creation of CLI and ArcMap interfaces by Christian Gass @ CivicMapper, Fall 2017, as peak-flow-calculator Updates for use within ArcGIS Pro by Christian Gass @ CivicMapper, Spring/Summer 2019, in peak-flow-calculator CulvertModel_2.1 by Jo Archibald in 2019 Drain-It repository by CivicMapper, 2021-2022","title":"Credits/Contributors"},{"location":"agp-python-toolbox/","text":"Toolbox ... NOAA Rainfall Raster Data Downloader ... NAACC Table Ingest ... NAACC Culvert Capacity ...","title":"Toolbox"},{"location":"agp-python-toolbox/#toolbox","text":"...","title":"Toolbox"},{"location":"agp-python-toolbox/#noaa-rainfall-raster-data-downloader","text":"...","title":"NOAA Rainfall Raster Data Downloader"},{"location":"agp-python-toolbox/#naacc-table-ingest","text":"...","title":"NAACC Table Ingest"},{"location":"agp-python-toolbox/#naacc-culvert-capacity","text":"...","title":"NAACC Culvert Capacity"},{"location":"culvert-capacity/","text":"Culvert Capacity Calculator","title":"Culvert Capacity Calculator"},{"location":"culvert-capacity/#culvert-capacity-calculator","text":"","title":"Culvert Capacity Calculator"},{"location":"curve-number-raster/","text":"Generating a Curve Number Raster","title":"Generating a Curve Number Raster"},{"location":"curve-number-raster/#generating-a-curve-number-raster","text":"","title":"Generating a Curve Number Raster"},{"location":"dem-rasters/","text":"Digital Elevation Model-derived Data","title":"Digital Elevation Model-derived Data"},{"location":"dem-rasters/#digital-elevation-model-derived-data","text":"","title":"Digital Elevation Model-derived Data"},{"location":"dev-overview/","text":"Overview Setup Anaconda Python and dependencies Project Structure The project is structure so there is a fairly clear separation of concerns between the code that handles the science behind the calculators the geoprocessing tools used to derive spatial statistics from the various map layers the specific i/o requirements and interfaces expected in end-user workflows src/ The folder contains external-facing interfaces that use the drainit package. It includes: CulvertToolbox.pyt and associated xml metadata. legacy drainit.tbx file (replaced by CulvertToolbox.pyt ) tbx_*.py scripts, which are workflow-specific and map 1:1 with tools in the ArcGIS Pro toolbox drainit.tbx . src/drainit/ This is the top-level package. It contains a few scripts: workflows.py Contains the code for executing analytical workflows at the highest level of abstraction. A single workflow is represented by a single python class. All workflow classes inherit from a base class that contains properties and methods for reading/writing workflow state to a JSON configuration file. cli.py Command line interface to the scripting tools (WIP). config.py and settings.py Constants used for script execution. models.py Internal data models used throughout the package. calculators/ Module containing the science and business logic of the various calculators available in the package: runoff/peak flow culvert capacity services/ Scripts for interacting with third-party domain-specific data sources (e.g., NOAA rainfall data, NAACC culvert data) and geoprocessing tools (e.g., Esri ArcPy, Whitebox tools). gp/ Geoprocessing services designed on specific provider tools (e.g., ESRI, Whitebox) and exposed through a generic class that is called by the workflow tools. This ensures workflow.py can run GP tools without needing to know exactly what underlying geoprocessing library is being used. esri/ This folder contains the built ArcGIS Pro Python toolbox, its metadata, and an arcpy interface script. These are automatically created during the build process and do not need to be manually edited under normal circumstances. Scripts: noaa and naaccc These are data provider-specific scripts that do that work tests Integration tests for workflows and tasks within workflows.","title":"Overview"},{"location":"dev-overview/#overview","text":"","title":"Overview"},{"location":"dev-overview/#setup-anaconda-python-and-dependencies","text":"","title":"Setup Anaconda Python and dependencies"},{"location":"dev-overview/#project-structure","text":"The project is structure so there is a fairly clear separation of concerns between the code that handles the science behind the calculators the geoprocessing tools used to derive spatial statistics from the various map layers the specific i/o requirements and interfaces expected in end-user workflows","title":"Project Structure"},{"location":"dev-overview/#src","text":"The folder contains external-facing interfaces that use the drainit package. It includes: CulvertToolbox.pyt and associated xml metadata. legacy drainit.tbx file (replaced by CulvertToolbox.pyt ) tbx_*.py scripts, which are workflow-specific and map 1:1 with tools in the ArcGIS Pro toolbox drainit.tbx .","title":"src/"},{"location":"dev-overview/#srcdrainit","text":"This is the top-level package. It contains a few scripts:","title":"src/drainit/"},{"location":"dev-overview/#workflowspy","text":"Contains the code for executing analytical workflows at the highest level of abstraction. A single workflow is represented by a single python class. All workflow classes inherit from a base class that contains properties and methods for reading/writing workflow state to a JSON configuration file.","title":"workflows.py"},{"location":"dev-overview/#clipy","text":"Command line interface to the scripting tools (WIP).","title":"cli.py"},{"location":"dev-overview/#configpy-and-settingspy","text":"Constants used for script execution.","title":"config.py and settings.py"},{"location":"dev-overview/#modelspy","text":"Internal data models used throughout the package.","title":"models.py"},{"location":"dev-overview/#calculators","text":"Module containing the science and business logic of the various calculators available in the package: runoff/peak flow culvert capacity","title":"calculators/"},{"location":"dev-overview/#services","text":"Scripts for interacting with third-party domain-specific data sources (e.g., NOAA rainfall data, NAACC culvert data) and geoprocessing tools (e.g., Esri ArcPy, Whitebox tools).","title":"services/"},{"location":"dev-overview/#gp","text":"Geoprocessing services designed on specific provider tools (e.g., ESRI, Whitebox) and exposed through a generic class that is called by the workflow tools. This ensures workflow.py can run GP tools without needing to know exactly what underlying geoprocessing library is being used.","title":"gp/"},{"location":"dev-overview/#esri","text":"This folder contains the built ArcGIS Pro Python toolbox, its metadata, and an arcpy interface script. These are automatically created during the build process and do not need to be manually edited under normal circumstances.","title":"esri/"},{"location":"dev-overview/#scripts-noaa-and-naaccc","text":"These are data provider-specific scripts that do that work","title":"Scripts: noaa and naaccc"},{"location":"dev-overview/#tests","text":"Integration tests for workflows and tasks within workflows.","title":"tests"},{"location":"installation/","text":"Installation 1. Download the Drain-It Installation file Head to the Releases page (github.com/civicmapper/drain-it/releases) and download the .whl file from the latest version of the tool. 1. Create a dedicated Python environment in ArcGIS Pro To use this package, you'll need to install it a custom Python environment for ArcGIS Pro. Clone the default ArcGIS Pro conda environment . Switch the current ArcGIS Pro conda environment to the cloned environment using the Python Package Manager . For more information on working with Python environments in ArcGIS Pro, see Esri's documentation . 3. Install Now that you have the installation file and the custom Python environment, you can install the toolbox. ArcGIS Pro comes with a \"Python Command Prompt\" shortcut available, which runs a batch script that automatically starts a command prompt with ArcGIS Pro's active Conda environment available. Typically this gets added to your Windows Start Menu alongside the shortcut to ArcGIS Pro. Open the Python Command Prompt that came with your ArcGIS Pro installation. In the command prompt, run pip install <path-to-the-whl-file\\drainit.whl> . You'll replace <path-to-the-whl-file\\drainit.whl> with the full path to the wheel file you downloaded in the previous step. After that you should see a Drain-It toolbox listed alongside other toolboxes in the ArcToolbox pane of ArcGIS Pro. You may need to restart ArcGIS Pro before you see it.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#1-download-the-drain-it-installation-file","text":"Head to the Releases page (github.com/civicmapper/drain-it/releases) and download the .whl file from the latest version of the tool.","title":"1. Download the Drain-It Installation file"},{"location":"installation/#1-create-a-dedicated-python-environment-in-arcgis-pro","text":"To use this package, you'll need to install it a custom Python environment for ArcGIS Pro. Clone the default ArcGIS Pro conda environment . Switch the current ArcGIS Pro conda environment to the cloned environment using the Python Package Manager . For more information on working with Python environments in ArcGIS Pro, see Esri's documentation .","title":"1. Create a dedicated Python environment in ArcGIS Pro"},{"location":"installation/#3-install","text":"Now that you have the installation file and the custom Python environment, you can install the toolbox. ArcGIS Pro comes with a \"Python Command Prompt\" shortcut available, which runs a batch script that automatically starts a command prompt with ArcGIS Pro's active Conda environment available. Typically this gets added to your Windows Start Menu alongside the shortcut to ArcGIS Pro. Open the Python Command Prompt that came with your ArcGIS Pro installation. In the command prompt, run pip install <path-to-the-whl-file\\drainit.whl> . You'll replace <path-to-the-whl-file\\drainit.whl> with the full path to the wheel file you downloaded in the previous step. After that you should see a Drain-It toolbox listed alongside other toolboxes in the ArcToolbox pane of ArcGIS Pro. You may need to restart ArcGIS Pro before you see it.","title":"3. Install"},{"location":"naacc-table/","text":"Working with NAACC Culvert Data","title":"Working with NAACC Culvert Data"},{"location":"naacc-table/#working-with-naacc-culvert-data","text":"","title":"Working with NAACC Culvert Data"},{"location":"noaa-rainfall/","text":"Getting NOAA Rainfall Data","title":"Getting NOAA Rainfall Data"},{"location":"noaa-rainfall/#getting-noaa-rainfall-data","text":"","title":"Getting NOAA Rainfall Data"},{"location":"peak-flow/","text":"Peak Flow Calculator Runoff peak discharge of given point's watershed is determined using the SCS graphical curve number method. For more information on this method, see Technical Release 55 .","title":"Peak Flow Calculator"},{"location":"peak-flow/#peak-flow-calculator","text":"Runoff peak discharge of given point's watershed is determined using the SCS graphical curve number method. For more information on this method, see Technical Release 55 .","title":"Peak Flow Calculator"},{"location":"run-batch/","text":"Batch Running the Capacity Calculator approaches for batching analysis for large areas","title":"Batch Running the Capacity Calculator"},{"location":"run-batch/#batch-running-the-capacity-calculator","text":"approaches for batching analysis for large areas","title":"Batch Running the Capacity Calculator"},{"location":"run-one/","text":"Running the Capacity Calculator","title":"Running the Capacity Calculator"},{"location":"run-one/#running-the-capacity-calculator","text":"","title":"Running the Capacity Calculator"}]}